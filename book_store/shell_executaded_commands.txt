Comandos executados shell do Django

Importando o módulo do app
from app_main.models import Book, Address, Author

Criando um registro:
harry_potter = Book(title="Harry Potter 1 - The Philosopher's Stone", rating=5)
harry_poter.save()
lord_of_the_rings = Book(title="Lord of the Rings", rating=4)
lord_of_the_rings.save()


Retorna uma lista de objetos criados no database
Book.objects.all()

Retornando o segundo objeto(registro)
Book.objects.all()[1]

Retorna um campo de um objeto criado(registro)
>>> Book.objects.all()[1].is_bestselling
False

Alterando um campo no Registro
>>> harry_potter = Book.objects.all()[0]
>>> harry_potter
<Book: Harry Potter 1 - The Philosopher's Stone (5)>
>>> harry_potter.author = "J.K. Rowling"
>>> harry_potter.save()

Deletando um Registro
>>> harry_potter = Book.objects.all()[0]
>>> harry_potter.delete()
(1, {'app_main.Book': 1})
>>> Book.objects.all()[0]
<Book: Lord of the Rings (4)>

Criando um registro diretamente no banco de dados
>>> Book.objects.create(title="Harry Potter 1", rating=5, author="J.K. Rowling", is_bestselling=True)
<Book: Harry Potter 1 (5)>
>>> Book.objects.all()
<QuerySet [<Book: Lord of the Rings (4)>, <Book: Harry Potter 1 (5)>]>

Filtrando buscas:
1- O método get só retorna um registro
>>> Book.objects.get(id=2)
<Book: Lord of the Rings (4)>
>>> Book.objects.get(title="My Stories")
<Book: My Storie (2)>

2- Com o método filter podemos retornar mais de um resultado
>>> Book.objects.filter(is_bestselling=True)
<QuerySet [<Book: Harry Potter 1 (5)>, <Book: Love is true (5)>]>

3- Filtrando com mais de um campo (operador and)
>>> Book.objects.filter(is_bestselling=False, rating=4)
<QuerySet [<Book: Lord of the Rings (4)>]>

4- Filtrando com menor ou igual (Lower Than Equal - __lte)
>>> Book.objects.filter(rating__lte=4)
<QuerySet [<Book: Lord of the Rings (4)>, <Book: My Storie (2)>]>

5- Special parameters (Field lookups)
__lte :: lower than iqual
__lt  :: lower than
__gt  :: greater than

6- Filtrando por dentro de uma string
>>> Book.objects.filter(title__contains="Stories")   #Contém na string (Case sensitive)
<QuerySet [<Book: My Stories (2)>]>
>>> Book.objects.filter(title__icontains="storie")   # NO Case sensitive
<QuerySet [<Book: My Storie (2)>]>

7- Operador OR
>>> from django.db.models import Q
>>> Book.objects.filter(Q(is_bestselling=False) | Q(rating=4))
<QuerySet [<Book: Lord of the Rings (4)>, <Book: My Storie (2)>]>

8- Operador AND com a classe Q
>>> Book.objects.filter(Q(is_bestselling=False) , Q(rating=4))
<QuerySet [<Book: Lord of the Rings (4)>]>
Importante: É possível combinar ou e and em uma única query

9- Inserindo um registro com chave estrangeira
>>> jkrowling = Author(first_name="J.K.", last_name="Rowling")  #Chave estrangeira
>>> jkrowling.save()
>>> hp1 = Book(title="Harry Potter 1", rating=5, is_bestselling=True, slug="", author=jkrowling)
>>> hp1.save()

10- Realizando um "Join" em tabelas correlacionadas
>>> harrypotter = Book.objects.get(title="Harry Poter 1")
>>> harrypotter.author  #Chave estrangeira da tabela author
<Author: Author object (1)>
>>> harrypotter.author.first_name   #"Join"
'J.K.'
>>>

11- Executando uma busca com filtro relacionado
Book.objects.filter(<tabela relacionada>__<campo>=<valor>)
>>> books_by_rowling = Book.objects.filter(author__last_name="Rowling")
>>> books_by_rowling
... também podemos ...
>>> books_by_rowling = Book.objects.filter(author__last_name__contains="wling")
>>> books_by_rowling
<QuerySet [<Book: Harry Poter 1 (5)>]>

12- Realizando uma busca invertendo a relação
>>> jkr = Author.objects.get(first_name="J.K.")
>>> jkr
<Author: Author object (1)>
>>> jkr.book_set.all()
<QuerySet [<Book: Harry Poter 1 (5)>]>
>>> jkr.book_set.get(title="Harry Potter 1")
<Book: Harry Potter 1 (5)>
-- Um conjunto 'set' é criado com as relações das outras tabelas.
-- É possível substituir 'book_set' por um alias declarando related_name="<string>"
author = models.ForeignKey(Author, on_delete=models.CASCADE, null=True, related_name="books")
Assim temos:
>>> jkr.books.all()
<QuerySet [<Book: Harry Poter 1 (5)>]>

13- Modificando um registro com relação um para um.
>>> jk.address
>>> addr1 = Address(street="St. Lois", city="London", postal_code=86512)
>>> addr1.save()
>>> jk.address = addr1
>>> jk.save()
>>> jk.address
<Address: Address object (1)>
-- Modificando um registro com relação um para um
>>> jk.address.street
'St. Lois'
>>> jk.address.street = "St. Louis"
>>> jk.address.ave()
>>> jk.address.street
'St. Louis'

14- Obtendo a relação inversa do um para um.
>>> ad1 = Address.objects.get(street="St. Louis")
>>> ad1.author
<Author: J.K. Rowling>
>>> ad1.author.first_name
'J.K.'
>>>
